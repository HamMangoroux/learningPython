import java.math.BigInteger;

public class Mini_RSA_decrypt {
    public static void main(String[] args) {
        String numStr = "1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808146919581675891411119628108546342758721287307471723093546788074479139848242227243523617899178070097350912870635303707113283010669418774091018728233471491573736725568575532635111164176010070788796616348740261987121152288917179932230769893513971774137615028741237163693178359120276497700812698199245070488892892209716639870702721110338285426338729911942926177029934906215716407021792856449586278849142522957603215285531263079546937443583905937777298337318454706096366106704204777777913076793265584075700215822263709126228246232640662350759018119501368721990988895700497330256765579153834824063344973587990533626156498797388821484630786016515988383280196865544019939739447062641481267899176504155482"; 
        BigInteger x = new BigInteger(numStr);

        BigInteger y = cubeRoot(x);
        System.out.println(y);
    }

    public static BigInteger cubeRoot(BigInteger n) {
        BigInteger low = BigInteger.ZERO;
        BigInteger high = n;
        BigInteger two = BigInteger.valueOf(2);

        while (low.compareTo(high) <= 0) {
            BigInteger mid = low.add(high).divide(two);
            BigInteger midCubed = mid.pow(3);

            int cmp = midCubed.compareTo(n);
            if (cmp == 0) return mid;
            else if (cmp < 0) low = mid.add(BigInteger.ONE);
            else high = mid.subtract(BigInteger.ONE);
        }
        return high;
    }
}

